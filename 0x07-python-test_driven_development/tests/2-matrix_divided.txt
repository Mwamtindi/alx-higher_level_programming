Test case:
matrix_divided will need user to specify a matrix and a div(dividion) number

import dividing module first:
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Usage:

Normal:
>>> matrix = [ [1, 2, 3], [4, 5, 6]]
>>> print (matrix_divided(matrix, 2))
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

print the original matrix
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

Using float elements:
>>> matrix = [
...     [2.4, -2.7, 12.0],
...     [2.5, 2.6, 10.8]
... ]
>>> print(matrix_divided(matrix, 2))
[[1.2, -1.35, 6.0], [1.25, 1.3, 5.4]]

current matrix
>>> print(matrix)
[[2.4, -2.7, 12.0], [2.5, 2.6, 10.8]]

Using a string:
>>> matrix = "a string"
>>> print(matrix_divided(matrix, 6))
Traceback (most recent call last):
    ...
    raise TypeError(output)
TypeError: matrix must be a matrix (list of lists) of integers/floats

Empty list
>>> matrix = []
>>> print(matrix_divided(matrix, 6))
[]

>>> matrix = [[]]
>>> print(matrix_divided(matrix, 6))
[[]]

No input
>>> matrix = None
>>> print(matrix_divided(matrix, 6))
Traceback (most recent call last):
  ...
    for lists in matrix:
TypeError: 'NoneType' object is not iterable

Strings:
>>> matrix = [
...     [22.2, "sh2", 44],
...     [80, "il", 11]
... ]
>>> print(matrix_divided(matrix, 4))
Traceback (most recent call last):
  ... 
   raise TypeError(output)
TypeError: matrix must be a matrix (list of lists) of integers/floats

Dividing using zero:
>>> matrix = [
...     [80, 21, 11],
...     [7, 2, 150]
... ]
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
  ...
    raise ZeroDivisionError("division by zero")
ZeroDivisionError: division by zero

Using wrong lists length:
>>> matrix = [
...     [7, 2, 150, 1],
...     [66, 17, 44]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  ...
    raise TypeError(output1)
TypeError: Each row of the matrix must have the same size
